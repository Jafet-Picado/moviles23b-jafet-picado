[{"name":"arithmethic_expressions_calculator","qualifiedName":"arithmethic_expressions_calculator","href":"arithmethic_expressions_calculator/arithmethic_expressions_calculator-library.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":""},{"name":"ExpressionCalculator","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator","href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html","kind":3,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"arithmethic_expressions_calculator","kind":8,"href":"arithmethic_expressions_calculator/arithmethic_expressions_calculator-library.html"}},{"name":"ExpressionCalculator","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator.ExpressionCalculator","href":"arithmethic_expressions_calculator/ExpressionCalculator/ExpressionCalculator.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"ExpressionCalculator","kind":3,"href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html"}},{"name":"calculate","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator.calculate","href":"arithmethic_expressions_calculator/ExpressionCalculator/calculate.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Calls the Node.calculate method and returns the result of the expression\nIt has an optional parameter to return a num value or a Fraction value\nIf the type parameter is the default one the value would be returned as num\nBut, it the parameter is changed then the value would be returned as Fraction\nExample:\nExpression: \"(1 / 2) + 0.25\".\nCalculate with default type would return 0.75\nCalculate with type changed would return 3/4","enclosedBy":{"name":"ExpressionCalculator","kind":3,"href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html"}},{"name":"createTree","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator.createTree","href":"arithmethic_expressions_calculator/ExpressionCalculator/createTree.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Creates the binary tree using the expression received.\nExample of expressions:\n(2 * 3) / 2 =&gt; Valid expression\n(2 * 3) / (2 + 1) =&gt; Valid expression\n(2 / (3 + 1)) =&gt; Valid expression\n(2/3 + 1) =&gt; Valid expression\n(2 + 1) =&gt; Invalid expression\n(2 + 1 =&gt; Invalid expression\n2 1 =&gt; Invalid expression\n2+1 =&gt; Valid expression\n2 + 1 =&gt; Valid Expression","enclosedBy":{"name":"ExpressionCalculator","kind":3,"href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html"}},{"name":"getPreorderRoute","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator.getPreorderRoute","href":"arithmethic_expressions_calculator/ExpressionCalculator/getPreorderRoute.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Calls the Node class preorderRoute method to return a String with\nthe binary tree preorder route","enclosedBy":{"name":"ExpressionCalculator","kind":3,"href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html"}},{"name":"root","qualifiedName":"arithmethic_expressions_calculator.ExpressionCalculator.root","href":"arithmethic_expressions_calculator/ExpressionCalculator/root.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Root of the binary tree, mainly the last operator to use","enclosedBy":{"name":"ExpressionCalculator","kind":3,"href":"arithmethic_expressions_calculator/ExpressionCalculator-class.html"}},{"name":"Node","qualifiedName":"arithmethic_expressions_calculator.Node","href":"arithmethic_expressions_calculator/Node-class.html","kind":3,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"arithmethic_expressions_calculator","kind":8,"href":"arithmethic_expressions_calculator/arithmethic_expressions_calculator-library.html"}},{"name":"Node","qualifiedName":"arithmethic_expressions_calculator.Node.Node","href":"arithmethic_expressions_calculator/Node/Node.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Node class Constructor, it receives a dynamic value (In this instance an\nint, double, Fraction or String) and optionally other two nodes (This\nforms a binary tree)","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"calculate","qualifiedName":"arithmethic_expressions_calculator.Node.calculate","href":"arithmethic_expressions_calculator/Node/calculate.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Solves the expression by using a preorder route on the binary tree\nand doing the operations between the child of each operation.\nExample:\nroot = *, root.left = 2 and root.right = 3\nThe value returned would be 2 * 3 = 6\nBut, if there is an invalid input like x instead of * to multiplication,\nit would throw an exception","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"left","qualifiedName":"arithmethic_expressions_calculator.Node.left","href":"arithmethic_expressions_calculator/Node/left.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Left child of the node","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"preorder","qualifiedName":"arithmethic_expressions_calculator.Node.preorder","href":"arithmethic_expressions_calculator/Node/preorder.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"This method go through the binary tree following a preorder route\n(root, left subtree and then right subtree) and write the values on a\nStringBuffer","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"preorderRoute","qualifiedName":"arithmethic_expressions_calculator.Node.preorderRoute","href":"arithmethic_expressions_calculator/Node/preorderRoute.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Returns a String with the binary tree values ordered in preorder.\nExample:\nroot = , root.left = 2 and root.right = 3 it would return \" 2 3\"","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"right","qualifiedName":"arithmethic_expressions_calculator.Node.right","href":"arithmethic_expressions_calculator/Node/right.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Right child of the node","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"value","qualifiedName":"arithmethic_expressions_calculator.Node.value","href":"arithmethic_expressions_calculator/Node/value.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Node's value, it can be an int, double, String or Fraction","enclosedBy":{"name":"Node","kind":3,"href":"arithmethic_expressions_calculator/Node-class.html"}},{"name":"fraction","qualifiedName":"fraction","href":"fraction/fraction-library.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":""},{"name":"DoubleToFraction","qualifiedName":"fraction.DoubleToFraction","href":"fraction/DoubleToFraction.html","kind":6,"overriddenDepth":0,"packageRank":0,"desc":"double type extension to add a method to create a Fraction with an double\nExample:\n0.50.toFraction() would return a 1/2 Fraction","enclosedBy":{"name":"fraction","kind":8,"href":"fraction/fraction-library.html"}},{"name":"toFraction","qualifiedName":"fraction.DoubleToFraction.toFraction","href":"fraction/DoubleToFraction/toFraction.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"DoubleToFraction","kind":6,"href":"fraction/DoubleToFraction.html"}},{"name":"Fraction","qualifiedName":"fraction.Fraction","href":"fraction/Fraction-class.html","kind":3,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"fraction","kind":8,"href":"fraction/fraction-library.html"}},{"name":"operator *","qualifiedName":"fraction.Fraction.*","href":"fraction/Fraction/operator_multiply.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Multiplication operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator +","qualifiedName":"fraction.Fraction.+","href":"fraction/Fraction/operator_plus.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Plus operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator -","qualifiedName":"fraction.Fraction.-","href":"fraction/Fraction/operator_minus.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Substraction operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator /","qualifiedName":"fraction.Fraction./","href":"fraction/Fraction/operator_divide.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Division operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator <","qualifiedName":"fraction.Fraction.<","href":"fraction/Fraction/operator_less.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Less than operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator <=","qualifiedName":"fraction.Fraction.<=","href":"fraction/Fraction/operator_less_equal.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Less than or equal operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator ==","qualifiedName":"fraction.Fraction.==","href":"fraction/Fraction/operator_equals.html","kind":9,"overriddenDepth":1,"packageRank":0,"desc":"Equal operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator >","qualifiedName":"fraction.Fraction.>","href":"fraction/Fraction/operator_greater.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Greater than operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"operator >=","qualifiedName":"fraction.Fraction.>=","href":"fraction/Fraction/operator_greater_equal.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Greater than or equal operator overload method","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"Fraction","qualifiedName":"fraction.Fraction.Fraction","href":"fraction/Fraction/Fraction.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Basic constructor that receives int values\nIt has a precision parameter to treat the irrational numbers\nAlso, all constructors throw an exception in case of the denominator\nbeing zero.\nExample:\nFraction(1,3) to num is 0.3333333333 if the precision is\nthe default one because 1/3 returns an irrational\nnumber, but if the precision is changed, for example: Fraction(1, 3, 4)\nthe result showed as num of the Fraction would be 0.3333","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"denominator","qualifiedName":"fraction.Fraction.denominator","href":"fraction/Fraction/denominator.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"The number below in the Fraction, for example: 1/2,\nbeing 2 the denominator","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"Fraction.fromDouble","qualifiedName":"fraction.Fraction.fromDouble","href":"fraction/Fraction/Fraction.fromDouble.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Named constructor to create a Fraction with a double value\nExample:\nFraction.fromDouble(0.50) would create a 1/2 Fraction\nIf the value received is NaN or an Infinite value, the constructor would\nthrow an exception.","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"Fraction.fromJson","qualifiedName":"fraction.Fraction.fromJson","href":"fraction/Fraction/Fraction.fromJson.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Named constructor to create a Fraction with a JSON as parameter\nExample:\nMap&lt;String, int&gt; tmp = {\"numerator\": 2, \"denominator\": 4};\nFraction.fromJson(tmp) would create a 2/4 Fraction.","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"Fraction.fromString","qualifiedName":"fraction.Fraction.fromString","href":"fraction/Fraction/Fraction.fromString.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Named constructor to create a Fraction with a String\nExample:\nFraction.fromString(\"2/4\") would create a 2/4 Fraction\nThis constructor only accepts complete fractions, so if the String is\nFraction.fromString(\"5\") it would throw an exception because the constructor\ndoesn't create a 5/1 Fraction unless it is explicit\nAlso, if the String has letters o symbols in it besides the /, it also would\nthrow an exception.","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"hashCode","qualifiedName":"fraction.Fraction.hashCode","href":"fraction/Fraction/hashCode.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Override the get hashCode to overload the equal operator","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"isImproper","qualifiedName":"fraction.Fraction.isImproper","href":"fraction/Fraction/isImproper.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Getter that returns true if a Fraction is improper, a fraction is improper\nwhen the numerator is equal or greater than the denominator\nExample:\n1/2 returns false\n4/2 returns true\n3/3 returns true","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"isNumeric","qualifiedName":"fraction.Fraction.isNumeric","href":"fraction/Fraction/isNumeric.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Return true if a string has only numeric values (Except the minus symbol)\nExample:\n\"123\" returns true\n\"-123\" returns true\n\"1a2\" returns false\n\"aaa\" returns false\n\"-12a\" returns false","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"isProper","qualifiedName":"fraction.Fraction.isProper","href":"fraction/Fraction/isProper.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Getter that returns true if a Fraction is proper, a fraction is proper\nwhen the denominator is greater than the numerator\nExample:\n1/2 returns true\n4/2 returns false\n3/3 returns false","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"isWhole","qualifiedName":"fraction.Fraction.isWhole","href":"fraction/Fraction/isWhole.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Getter that returns true if a Fraction is whole, a fraction is whole\nwhen the numerator and denominator are equal\nExample:\n1/2 returns false\n4/2 returns false\n3/3 returns true","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"numerator","qualifiedName":"fraction.Fraction.numerator","href":"fraction/Fraction/numerator.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"The number above in the Fraction, for example: 1/2,\nbeing 1 the numerator","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"pow","qualifiedName":"fraction.Fraction.pow","href":"fraction/Fraction/pow.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Return the power of a fraction based on the exponent\n(Accepts negative exponents)\nExample:\na = Fraction(1,3)\nb = a.pow(2) =&gt; (1/3)^2 = 1/9\nc = a.pow(-2) =&gt; (1/3)^-2 = (3/1)^2 = 9","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"precision","qualifiedName":"fraction.Fraction.precision","href":"fraction/Fraction/precision.html","kind":15,"overriddenDepth":0,"packageRank":0,"desc":"Value used to know the number of decimals to use, mainly used to work\nwith irrational numbers","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"simplify","qualifiedName":"fraction.Fraction.simplify","href":"fraction/Fraction/simplify.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Simplifies the numerator and denominator of a Fraction\nExample:\nIf it is a 2/4 fraction, then after the simplification the fraction is going\nto be 1/2.","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"toNum","qualifiedName":"fraction.Fraction.toNum","href":"fraction/Fraction/toNum.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Returns the Fraction as a num value\nExample:\nFraction(1,2).toNum() would return 0.50","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"toString","qualifiedName":"fraction.Fraction.toString","href":"fraction/Fraction/toString.html","kind":9,"overriddenDepth":1,"packageRank":0,"desc":"toString override method to return the Fraction as an String\nExample:\nprint(Fraction(1,2)) would print 1/2\nIf the denominator is 1, then it would only print the numerator:\nprint(Fraction(2,1)) would print 2","enclosedBy":{"name":"Fraction","kind":3,"href":"fraction/Fraction-class.html"}},{"name":"IntToFraction","qualifiedName":"fraction.IntToFraction","href":"fraction/IntToFraction.html","kind":6,"overriddenDepth":0,"packageRank":0,"desc":"int type extension to add a method to create a Fraction with an int\nExample:\n10.toFraction() would return a 10/1 Fraction","enclosedBy":{"name":"fraction","kind":8,"href":"fraction/fraction-library.html"}},{"name":"toFraction","qualifiedName":"fraction.IntToFraction.toFraction","href":"fraction/IntToFraction/toFraction.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"IntToFraction","kind":6,"href":"fraction/IntToFraction.html"}},{"name":"StringToFraction","qualifiedName":"fraction.StringToFraction","href":"fraction/StringToFraction.html","kind":6,"overriddenDepth":0,"packageRank":0,"desc":"String type extension to add a method to create a Fraction with a String\nExample:\n\"3/2\".toFraction() would return a 3/2 Fraction","enclosedBy":{"name":"fraction","kind":8,"href":"fraction/fraction-library.html"}},{"name":"toFraction","qualifiedName":"fraction.StringToFraction.toFraction","href":"fraction/StringToFraction/toFraction.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"","enclosedBy":{"name":"StringToFraction","kind":6,"href":"fraction/StringToFraction.html"}}]
